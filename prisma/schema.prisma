generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  fullname  String
  email     String    @unique
  password  String
  nif       String    @unique
  role      Role
  client    Client?
  provider  Provider?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("Users")
}

model Client {
  id       String    @id @default(uuid())
  user     User      @relation(fields: [id], references: [id])
  balance  Float     @default(50000)
  bookings Booking[] @relation("ClientBookings")
}

model Provider {
  id       String    @id @default(uuid())
  user     User      @relation(fields: [id], references: [id])
  balance  Float     @default(0.0)
  services Service[]
  bookings Booking[] @relation("ProviderBookings")

  @@map("Providers")
}

model Service {
  id          String    @id @default(uuid())
  name        String
  description String?
  price       Float
  providerId  String
  provider    Provider  @relation(fields: [providerId], references: [id])
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("Services")
}

model Booking {
  id          String        @id @default(uuid())
  clientId    String
  serviceId   String
  providerId  String
  price       Float
  dateBooking DateTime
  status      BookingStatus @default(CONFIRMED)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  client   Client   @relation("ClientBookings", fields: [clientId], references: [id])
  service  Service  @relation(fields: [serviceId], references: [id])
  provider Provider @relation("ProviderBookings", fields: [providerId], references: [id])

  @@map("Bookings")
}

enum Role {
  CLIENT
  PROVIDER
}

enum BookingStatus {
  CONFIRMED
  CANCELED
  COMPLETED
}
